{
    "创建模版": {
        "prefix": "ye:template",
		"description": "创建模版",
        "body": [
            "<template>",
            "    <div",
            "        ref=\"el\"",
            "        v-show=\"display__\"",
            "        v-if=\"refresh__\"",
            "        :id=\"id__\"",
            "        :class=\"[cType__, theme.bemModifiers]\">",
            "    </div>",
            "</template>",
            "<script lang=\"ts\">",
            "import { defineComponent } from 'vue';",
            "import { ${1:${TM_DIRECTORY/.*\\/(.+)/${1:/capitalize}/}}Props, setup${1:${TM_DIRECTORY/.*\\/(.+)/${1:/capitalize}/}}, ${1:${TM_DIRECTORY/.*\\/(.+)/${1:/capitalize}/}}Expose, ${1:${TM_DIRECTORY/.*\\/(.+)/${1:/capitalize}/}}Emits } from './logic';",
            "/**",
            " * ${1:${TM_DIRECTORY/.*\\/(.+)/${1:/capitalize}/}}使用",
            " * @name ${1:${TM_DIRECTORY/.*\\/(.+)/${1:/capitalize}/}}",
            " */",
            "export default defineComponent({",
            "    name: '${1:${TM_DIRECTORY/.*\\/(.+)/${1:/capitalize}/}}',",
            "    props: ${1:${TM_DIRECTORY/.*\\/(.+)/${1:/capitalize}/}}Props,",
            "    expose: ${1:${TM_DIRECTORY/.*\\/(.+)/${1:/capitalize}/}}Expose,",
            "    emits: ${1:${TM_DIRECTORY/.*\\/(.+)/${1:/capitalize}/}}Emits,",
            "    setup(props,ctx) {",
            "        return setup${1:${TM_DIRECTORY/.*\\/(.+)/${1:/capitalize}/}}(props,ctx);",
            "    }",
            "});",
            "",
            "</script>",
            "<style lang=\"scss\" scoped>",
            "@import './style.scss';",
            "</style>"
        ]
    },
    "创建导出": {
        "prefix": "ye:index",
		"description": "创建建",
        "body": [
           "import type { App, Plugin } from 'vue';",
		   "import { _register } from '../../common/prefab';",
           "import type { PlatformOptions } from '../../types/options';",
           "import type { ComponentType } from '../../types/prefab';",
           "import type { ${1:${TM_DIRECTORY/.*\\/(.+)/${1:/capitalize}/}}ExposeType } from './logic';",
           "import ${1:${TM_DIRECTORY/.*\\/(.+)/${1:/capitalize}/}} from './template.vue';",
           "",
           "const ${1:${TM_DIRECTORY/.*\\/(.+)/${1:/capitalize}/}}Plugin: Plugin = {",
		   "    install(app: App, optinos: PlatformOptions) {",
		   "        _register(app, ${1:${TM_DIRECTORY/.*\\/(.+)/${1:/capitalize}/}}, optinos);",
		   "    }",
		   "};",
		   "",
		   "",
           "export type * from './logic';",
           "export { ${1:${TM_DIRECTORY/.*\\/(.+)/${1:/capitalize}/}}, ${1:${TM_DIRECTORY/.*\\/(.+)/${1:/capitalize}/}}Plugin };",
           "export type { PlatformOptions };",
           "export type ${1:${TM_DIRECTORY/.*\\/(.+)/${1:/capitalize}/}}Type = ComponentType<typeof ${1:${TM_DIRECTORY/.*\\/(.+)/${1:/capitalize}/}}, ${1:${TM_DIRECTORY/.*\\/(.+)/${1:/capitalize}/}}ExposeType>;",
        ]
    },
    "创建样式":{
        "prefix": "ye:style",
		"description": "创建建",
        "body": [
           "@import '../theme/scss/reset';",
           "",
           "@include b('${1:${TM_DIRECTORY/.*\\/(.+)/${1:/camelcase}/}}') {",
           "}"
        ]
    },
    "创建逻辑": {
        "prefix": "ye:logic",
        "body": [
            "import { computed, type EmitsOptions, type ExtractPropTypes, type SetupContext } from 'vue';",
            "import { baseExpose, BaseProps, usePrefab, useTheme } from '../../common/prefab';",
            "import type { InternalSetupContext } from '../../types/prefab';",
            "import type { ThemeConfig } from '../../types/theme';",

            "export const ${1:${TM_DIRECTORY/.*\\/(.+)/${1:/capitalize}/}}Props = {",
            "    ...BaseProps,",
            "} as const;",
            "export type ${1:${TM_DIRECTORY/.*\\/(.+)/${1:/capitalize}/}}PropsType = Readonly<ExtractPropTypes<typeof ${1:${TM_DIRECTORY/.*\\/(.+)/${1:/capitalize}/}}Props>>;",
            "",
            "",
            "export interface ${1:${TM_DIRECTORY/.*\\/(.+)/${1:/capitalize}/}}Theme extends ThemeConfig {",
			"    bemModifiers?: string[];",
            "}",
            "",
            "export const ${1:${TM_DIRECTORY/.*\\/(.+)/${1:/capitalize}/}}Emits = {};",
            "",
            "const obtainTheme = <E extends EmitsOptions>(ctx: InternalSetupContext<${1:${TM_DIRECTORY/.*\\/(.+)/${1:/capitalize}/}}PropsType, E>) => {",
            "    const themeConfig = useTheme();",
            "    return computed<${1:${TM_DIRECTORY/.*\\/(.+)/${1:/capitalize}/}}Theme>(() => {",
            "        const _themeConfig = themeConfig.value;",
			"",
			"",
            "        const theme: ${1:${TM_DIRECTORY/.*\\/(.+)/${1:/capitalize}/}}Theme = {",
            "            ..._themeConfig",
            "        };",
            "",
            "        theme.bemModifiers = [];",
            "",
            "        return theme;",
            "    });",
            "};",
       "",
            "export const setup${1:${TM_DIRECTORY/.*\\/(.+)/${1:/capitalize}/}} = (props: ${1:${TM_DIRECTORY/.*\\/(.+)/${1:/capitalize}/}}PropsType, ctx: SetupContext<typeof ${1:${TM_DIRECTORY/.*\\/(.+)/${1:/capitalize}/}}Emits>) => {",
            "    const commonExposed = usePrefab(props);",
            "    const theme = obtainTheme<typeof ${1:${TM_DIRECTORY/.*\\/(.+)/${1:/capitalize}/}}Emits>({ props, commonExposed, ...ctx });",
            "    return {",
            "        ...commonExposed,",
            "        theme,",
            "    };",
            "}",
            "export const ${1:${TM_DIRECTORY/.*\\/(.+)/${1:/capitalize}/}}Expose = [...baseExpose, ...([] as const)];",
            "export type ${1:${TM_DIRECTORY/.*\\/(.+)/${1:/capitalize}/}}ExposeType = (typeof ${1:${TM_DIRECTORY/.*\\/(.+)/${1:/capitalize}/}}Expose)[number];",
        ]
    }
}
